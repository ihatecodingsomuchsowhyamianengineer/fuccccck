package com.novaventure.survivalessentials;

import com.novaventure.survivalessentials.registry.ModTools.Blocks.SaltOreBlock;
import net.fabricmc.api.ModInitializer;
import net.fabricmc.fabric.api.biome.v1.BiomeModifications;
import net.fabricmc.fabric.api.biome.v1.BiomeSelectors;
import net.minecraft.block.Blocks;
import net.minecraft.util.Identifier;
import net.minecraft.util.registry.BuiltinRegistries;
import net.minecraft.util.registry.Registry;
import net.minecraft.util.registry.RegistryKey;
import net.minecraft.world.gen.GenerationStep;
import net.minecraft.world.gen.decorator.Decorator;
import net.minecraft.world.gen.decorator.RangeDecoratorConfig;
import net.minecraft.world.gen.feature.ConfiguredFeature;
import net.minecraft.world.gen.feature.Feature;
import net.minecraft.world.gen.feature.OreFeatureConfig;
import net.minecraft.world.gen.feature.RandomPatchFeatureConfig;
import net.minecraft.world.gen.placer.SimpleBlockPlacer;
import net.minecraft.world.gen.stateprovider.SimpleBlockStateProvider;

import static com.novaventure.survivalessentials.SurvivalEssentials.CHERT_BLOCK;
import static com.novaventure.survivalessentials.SurvivalEssentials.MOD_ID;
import static net.minecraft.util.registry.Registry.register;

public class ConfiguredFeatures implements ModInitializer {
    public static final ConfiguredFeature<?, ?> FLOWER_PLAIN = register("chert_block", Feature.FLOWER
            .configure((new RandomPatchFeatureConfig.Builder(new SimpleBlockStateProvider(CHERT_BLOCK.getDefaultState()),
                    new SimpleBlockPlacer().INSTANCE).tries(64).build())));

    private static ConfiguredFeature<?,?> ORE_SALT_OVERWORLD = Feature.ORE
            .configure(new OreFeatureConfig(OreFeatureConfig.Rules.BASE_STONE_OVERWORLD, Blocks.SaltOreBlock.getDefaultState(),
                    9)) //vein size
            .decorate(Decorator.RANGE.configure(new RangeDecoratorConfig(0,0, 62))
            .spreadHorizontally()
            .repeat(5));

    @Override
    public void onInitialize() {
        RegistryKey<ConfiguredFeature<?, ?>> oreSaltOverworld = RegistryKey.of(Registry.CONFIGURED_FEATURE_WORLDGEN, new Identifier(MOD_ID, "ore_salt_overworld"));
        register(BuiltinRegistries.CONFIGURED_FEATURE, oreSaltOverworld.getValue(), ORE_SALT_OVERWORLD);
        BiomeModifications.addFeature(BiomeSelectors.foundInOverworld(), GenerationStep.Feature.UNDERGROUND_ORES, oreSaltOverworld);
    }
}
